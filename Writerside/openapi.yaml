openapi: 3.0.0
info:
  title: PetShop API
  version: 1.0.0
  description: This is a backend API for the PetShop spa application. It is a RESTFULL API built with Laravel. Created for study project.
  contact:
    name: John Doe
    email: contact@pet-shop-fonda.com
servers:
  - url: http://localhost
    description: Local server
  - url: https://monapi.com/api
    description: Production server
paths:
  /api/register:
    post:
      tags:
        - register
      summary: Register a new user
      operationId: register
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usersInput'

      responses:
        '201':
          description: OK - User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUser'

        '200':
          description: OK - User already authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUser'

        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'
  /api/login:
    post:
      tags:
        - login
      summary: Login a user
      operationId: login
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: email
          in: query
          description: User email
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: User password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUser'

        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'

  /api/logout:
    post:
      tags:
        - logout
      summary: Logout a user
      operationId: logout
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '204':
          description: No Content - User logged out

        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'

        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/user:
    get:
      tags:
        - user
      summary: Get data of the authenticated user
      operationId: user
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '200':
          description: OK - Returns the authenticated user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUser'
        '401':
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthenticated'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'
    delete:
      tags:
        - user-delete
      summary: Soft delete the user account and all data is anonymized
      operationId: user.delete
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: id
          in: query
          description: User id to delete
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content - User deleted successfully or user already deleted (empty response)
          content:
            application/json:
              schema:
                type: object

        '401':
          description: Unauthorized - User not authenticated or not authorized to delete the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    description: Unauthorized - User not authenticated or not authorized to delete the user
                    type: string
        '403':
          description: Forbidden - User not authorized to delete
          content:
            application/json:
              schema:
                properties:
                  message:
                    description: Forbidden - User not authorized to delete the user or Admin can't be deleted
                    type: string
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'
        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /sanctum/csrf-cookie:
    get:
      tags:
        - sanctum
      summary: Get CSRF token cookie
      operationId: csrf-cookie
      description: Get CSRF token cookie to be used in the next request to the API
      responses:
        '204':
          description: No Content - CSRF token set on cookie

  /api/forgot-password:
    post:
      tags:
        - forgot-password
      summary: Forgot password
      operationId: forgot-password
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: email
          in: query
          description: User email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK - Password reset link sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUser'

        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'

  /api/reset-password:
    post:
      tags:
        - reset-password
      summary: Reset password
      operationId: reset-password
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: token
          in: query
          description: Reset password token sent by email after forgot password request
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: User email
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: New password
          required: true
          schema:
            type: string
        - name: password_confirmation
          in: query
          description: New password confirmation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK - Password rested'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseMsg'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'
        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/user/password:
    put:
      tags:
        - update-password
      summary: Update user password
      operationId: update-password
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: current_password
          in: query
          description: Current user password
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: New password
          required: true
          schema:
            type: string
        - name: password_confirmation
          in: query
          description: New password confirmation
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK - Password updated successfully empty response
        '401':
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthenticated'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'
        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/user/profile-information:
    put:
      tags:
        - update-profile-information
      summary: Update user profile information
      operationId: update-profile-information
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '200':
          description: OK - User profile information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUser'
        '401':
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthenticated'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'
        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/species/{id}:
    get:
      tags:
        - species
      summary: Get a species
      operationId: species.show
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Species id
      responses:
        '200':
          description: Successfully fetched a species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesShow200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/species:
    get:
      tags:
        - species
      summary: Get all species
      operationId: species.index
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesIndex200'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - species
      summary: Create a species
      operationId: species.create
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeciesCreateMessage'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeciesCreate200'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/races/{id}:
    get:
      tags:
        - races
      summary: Get a race
      operationId: races.show
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Race id
      responses:
        '200':
          description: Successfully fetched a race
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RacesShow200'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/races:
    get:
      tags:
        - races
      summary: Get all races
      operationId: races.index
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RacesIndex200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - races
      summary: Create a race
      operationId: races.create
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RacesCreateMessage'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RacesCreate200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/pet-shops/{id}:
    get:
      tags:
        - pet-shops
      summary: Get a pet shop
      operationId: pet-shops.show
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Pet shop id
      responses:
        '200':
          description: Successfully fetched a pet shop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetShopsShow200'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/pet-shops:
    get:
      tags:
        - pet-shops
      summary: Get all races
      operationId: pet-shops.index
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: city
          in: query
          description: City name
          required: false
          schema:
            type: string
        - name: zipcode
          in: query
          description: City zipcode
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetShopsIndex200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - pet-shops
      summary: Create a race
      operationId: pet-shops.create
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetShopsCreateMessage'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetShopsCreate200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/animals/{id}:
    get:
      tags:
        - animals
      summary: Get an animal
      operationId: animals.show
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: Animal id
      responses:
        '200':
          description: Successfully fetched an animal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalsShow200'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/animals:
    get:
      tags:
        - animals
      summary: Get all animals
      operationId: animals.index
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
        - name: race
          in: query
          description: Animal race
          required: false
          schema:
            type: string
        - name: species
          in: query
          description: Animal species
          required: false
          schema:
            type: string
        - name: age_min
          in: query
          description: Animal age min
          required: false
          schema:
            type: integer
        - name: age_max
          in: query
          description: Animal age max
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalsIndex200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - animals
      summary: Create an Animal
      operationId: animals.create
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalsCreateMessage'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalsCreate200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/animals-user:
    get:
      tags:
        - favorties
      summary: Get all user favorties
      operationId: favorites.index
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavortiesIndex200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
        - favorties
      summary: Create an Animal
      operationId: animals.create
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoritesCreateMessage'
      responses:
        '200':
          description: Successfully fetched all species
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesCreate200'
        '404':
          description: Species not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/404'
        default:
          description: Error - Returns an error message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /api/user/confirm-password:
    post:
      tags:
        - confirm-password
      summary: Confirm user password
      operationId: confirm-password
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '201':
          description: created - Password confirmed successfully empty response
        '401':
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthenticated'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'
        '422':
          description: Unpronounceable Content - Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /api/user/confirmed-password-status:
    get:
      tags:
        - confirmed-password-status
      summary: Get user confirmed password status
      operationId: confirmed-password-status
      parameters:
        - name: HeaderAuth
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/headerAuth'
      responses:
        '200':
          description: OK - Returns true if the user has confirmed his password recently
          content:
            application/json:
              schema:
                type: boolean
        '401':
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorUnauthenticated'
        '419':
          description: Session Expired - Validation errors (CSRF token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorCsrf'

# component templates for the API documentation
components:
  schemas:
    headerAuth:
      type: object
      properties:
        X-XSRF-TOKEN:
          description: CSRF token get by the route /sanctum/csrf-cookie
          type: string
          format: uuid
          example: 8f8b7c7a-8b7c-4f8b-8b7c-7a8b7c4f8b7c
        Referer:
          description: Referer sent by the client and this obligatory to be defined in SANCTUM_STATEFUL_DOMAINS on .env file of the backend
          type: string
          example: http://localhost:8080
    usersInput:
      type: object
      properties:
        name:
          type: string
          required: true
        email:
          type: string
          required: true
        password:
          type: string
          required: true
        password_confirmation:
          type: string
          required: true
    responseUser:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
    responseMsg:
      type: object
      properties:
        message:
          type: string
    error:
      type: object
      properties:
        message:
          description: Error message
          type: string
        errors:
          description: Validation errors
          type: object
    errorCsrf:
      type: object
      properties:
        message:
          description: CSRF token validation error the request header is missing the CSRF token or the token is invalid
          type: string
          required: true
    404:
      type: object
      properties:
        message:
          description: Error message
          type: string
    errorUnauthenticated:
      type: object
      properties:
        message:
          description: Unauthenticated error
          type: string
          required: true
    SpeciesShow200:
      type: object
      properties:
        id:
          description: Species ID
          type: integer
        name:
          description: Species name
          type: string
    SpeciesIndex200:
      type: array
      items:
        type: object
        properties:
          id:
            description: Species ID
            type: integer
          name:
            description: Species name
            type: string
    SpeciesCreateMessage:
      type: object
      properties:
        name:
          description: Species name
          type: string
    SpeciesCreate200:
      type: object
      properties:
        name:
          description: Species name
          type: string
        id:
          description: Species ID
          type: integer
    RacesShow200:
      type: object
      properties:
        id:
          description: Race ID
          type: integer
        species_id:
          description: ID of the race's species
          type: integer
        name:
          description: Race name
          type: string
    RacesIndex200:
      type: array
      items:
        type: object
        properties:
          id:
            description: Race ID
            type: integer
          species_id:
            description: ID of the race's species
            type: integer
          name:
            description: Species name
            type: string
    RacesCreateMessage:
      type: object
      properties:
        name:
          description: Race name
          type: string
        species_id:
          description: ID of the race's species
          type: string
    RacesCreate200:
      type: object
      properties:
        name:
          description: Race name
          type: string
        species_id:
          description: ID of the race's species
          type: string
        id:
          description: Race ID
          type: string
    PetShopsShow200:
      type: object
      properties:
        name:
          description: Pet shop name
          type: string
    PetShopsIndex200:
      type: array
      items:
        type: object
        properties:
          id:
            description: Pet shop ID
            type: integer
          name:
            description: Pet shop name
            type: string
          address:
            description: Pet shop address
            type: string
          zipcode:
            description: Pet shop zipcode
            type: string
          city:
            description: Pet shop city
            type: string
          phone:
            description: Pet shop phone
            type: string
          content:
            description: Pet shop description
            type: string
          medias_id:
            description: ID of the pet shop's medias
            type: string
    PetShopsCreateMessage:
      type: object
      properties:
        name:
          description: Pet shop name
          type: string
        address:
          description: Pet shop address
          type: string
        zipcode:
          description: Pet shop zipcode
          type: string
        city:
          description: Pet shop city
          type: string
        phone:
          description: Pet shop phone
          type: string
    PetShopsCreate200:
      type: object
      properties:
        name:
          description: Pet shop name
          type: string
        address:
          description: Pet shop address
          type: string
        zipcode:
          description: Pet shop zipcode
          type: string
        city:
          description: Pet shop city
          type: string
        phone:
          description: Pet shop phone
          type: string
        id:
          description: Pet shop ID
          type: string
    AnimalsShow200:
      type: object
      properties:
        id:
          description: Animal ID
          type: integer
        name:
          description: Animal name
          type: string
        gender:
          description: Animal gender
          type: string
        date_of_birth:
          description: Animal date of birth
          type: string
        race_id:
          description: ID of the animal race
          type: integer
        pet_shop_id:
          description: ID of the animal pet shop
          type: integer
        medias_id:
          description: ID of the animal medias
          type: integer
        pet_shops:
          description: ID of the animal pet shop
          type: object
          properties:
            id:
              description: Pet shop ID
              type: integer
            name:
              description: Pet shop name
              type: string
            address:
              description: Pet shop address
              type: string
            zipcode:
              description: Pet shop zipcode
              type: string
            city:
              description: Pet shop city
              type: string
            phone:
              description: Pet shop phone
              type: string
            content:
              description: Pet shop description
              type: string
            medias_id:
              description: ID of the pet shop's medias
              type: integer
    AnimalsIndex200:
      type: array
      items:
        type: object
        properties:
          id:
            description: Animal ID
            type: integer
          name:
            description: Animal name
            type: string
          gender:
            description: Animal gender
            type: string
          date_of_birth:
            description: Animal date of birth
            type: string
          race_id:
            description: ID of the animal's race
            type: integer
          pet_shop_id:
            description: ID of the animal's pet shop
            type: integer
          medias_id:
            description: ID of the animal's medias
            type: integer
          races:
            type: array
            items:
              type: object
              properties:
                id:
                  description: ID of the animal's race
                  type: integer
                species_id:
                  description: ID of the animal's species
                  type: integer
                name:
                  description: Animal name
                  type: string
                species:
                  type: object
                  properties:
                    id:
                      description: ID of the animal's species
                      type: integer
                    name:
                      description: Name of the animal's species
                      type: string
    AnimalsCreateMessage:
      type: object
      properties:
        name:
          description: Animal name
          type: string
        gender:
          description: Animal gender
          type: string
        date_of_birth:
          description: Animal date of birth
          type: string
        race_id:
          description: ID of the animal's race
          type: integer
        pet_shop_id:
          description: ID of the animal's pet shop
          type: integer
    AnimalsCreate200:
      type: object
      properties:
        name:
          description: Animal name
          type: string
        gender:
          description: Animal gender
          type: string
        date_of_birth:
          description: Animal date of birth
          type: string
        race_id:
          description: ID of the animal's race
          type: integer
        pet_shop_id:
          description: ID of the animal's pet shop
          type: integer
        id:
          description: Animal ID
          type: integer
    FavortiesIndex200:
      type: array
      items:
        type: object
        properties:
          animal_id:
            description: ID of the animal
            type: integer
          user_id:
            description: ID of the user
            type: integer
          animal:
            type: object
            properties:
              id:
                description: Animal ID
                type: integer
              name:
                description: Animal name
                type: string
              gender:
                description: Animal gender
                type: string
              date_of_birth:
                description: Animal date of birth
                type: string
              race_id:
                description: ID of the animal's race
                type: integer
              pet_shop_id:
                description: ID of the animal's pet shop
                type: integer
              media_id:
                description: ID of the animal's medias
                type: integer
    FavoritesCreateMessage:
      type: object
      properties:
        id:
          description: Animal ID
          type: integer
    FavoritesCreate200:
      type: object
      properties:
        user_id:
          description: User ID
          type: integer
        animal_id:
          description: Animal ID
          type: integer